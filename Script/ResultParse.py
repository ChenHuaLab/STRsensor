#!/usr/bin/python3
'''
    PROGRAM: ResultParse.py
    AUTHOR:  xiaolong Zhang
    EMAIL:   xiaolongzhang2015@163.com
    DATE:    2020-06-26
    UPDATE:  2020-08-16
'''

import pdb

import sys
import os
import os.path


def get_locus(locus_file):
    file_fp = open(locus_file, "r")

    h_list = file_fp.readline().split()

    if h_list[0] != '#Locus':
        sys.stderr.write("[Error] %s is not generated by STRCaller!\n" % locus_file)
        sys.exit(-1)

    return h_list[1].rstrip()


def read_locus(locus_file):
    a_list = []
    fp = open(locus_file, "r")

    for line in fp:
        if line.startswith("#"): continue
        l = line.split()
        a_list.append((l[0][:-4], l[1].replace('/', '|'))) # P123.bam -> P123

    return a_list


def process_main(file_path, output, order_list):
    ''' locus_list = [DYS19, DYS390, DYS392, ...]
        allele_matrix = [[(P1, 14), (P2, 13), ...], [], [], ...]
    '''
    locus_list, allele_matrix = [], []
    flist = order_list if order_list else os.listdir(file_path)

    for fn in flist:
        if fn == '.DS_Store': continue  # skip hidden file in macOS
        locus_file = os.path.join(file_path, fn)
        locus_list.append(get_locus(locus_file))
        allele_matrix.append(read_locus(locus_file))

    out_fp = open(output, "w")
    out_fp.write("Sample\t%s\n" % ('\t'.join(locus_list)))

    for i in range(len(allele_matrix[0])):
        for j in range(len(locus_list)):
            if j == 0:
                out_fp.write("%s\t%s\t" % (allele_matrix[j][i][0], allele_matrix[j][i][1]))
            else: 
                out_fp.write("%s\t" % allele_matrix[j][i][1])
        out_fp.write("\n")

    out_fp.close()


if __name__ == "__main__":
    args = sys.argv

    if len(args) < 3:
        sys.stderr.write("Usage: python ResultParse.py <result_path> <outfile_name>\n")
        sys.exit(0)

    order_list = []

    if len(args) == 4: # order_list is provided
        fp = open(args[3], 'r')
        for line in fp:
            order_list.append(line.rstrip())
        fp.close()

    process_main(args[1], args[2], order_list)


